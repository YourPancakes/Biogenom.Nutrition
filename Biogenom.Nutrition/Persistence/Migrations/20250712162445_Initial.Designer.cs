// <auto-generated />
using System;
using Biogenom.Nutrition.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Biogenom.Nutrition.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712162445_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DailyNormMax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DailyNormMin")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.NutrientBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FromDiet")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FromSupplements")
                        .HasColumnType("numeric");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<int>("NutritionAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId");

                    b.HasIndex("NutritionAssessmentId");

                    b.ToTable("NutrientBalances");
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.NutritionAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EatsBreakfast")
                        .HasColumnType("boolean");

                    b.Property<bool>("EatsFastFood")
                        .HasColumnType("boolean");

                    b.Property<bool>("EatsProcessedFood")
                        .HasColumnType("boolean");

                    b.Property<int>("FruitsPerDay")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<int>("MealsPerDay")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SleepQuality")
                        .HasColumnType("integer");

                    b.Property<int>("StressLevel")
                        .HasColumnType("integer");

                    b.Property<int>("VegetablesPerDay")
                        .HasColumnType("integer");

                    b.Property<int>("WaterIntake")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("NutritionAssessments");
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.PersonalizedSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NutritionAssessmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NutritionAssessmentId");

                    b.ToTable("PersonalizedSets");
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WhenToTake")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("PersonalizedSetSupplement", b =>
                {
                    b.Property<int>("PersonalizedSetsId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplementsId")
                        .HasColumnType("integer");

                    b.HasKey("PersonalizedSetsId", "SupplementsId");

                    b.HasIndex("SupplementsId");

                    b.ToTable("PersonalizedSetSupplements", (string)null);
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.NutrientBalance", b =>
                {
                    b.HasOne("Biogenom.Nutrition.Domain.Entities.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biogenom.Nutrition.Domain.Entities.NutritionAssessment", "NutritionAssessment")
                        .WithMany("NutrientBalances")
                        .HasForeignKey("NutritionAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");

                    b.Navigation("NutritionAssessment");
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.PersonalizedSet", b =>
                {
                    b.HasOne("Biogenom.Nutrition.Domain.Entities.NutritionAssessment", "NutritionAssessment")
                        .WithMany("PersonalizedSets")
                        .HasForeignKey("NutritionAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionAssessment");
                });

            modelBuilder.Entity("PersonalizedSetSupplement", b =>
                {
                    b.HasOne("Biogenom.Nutrition.Domain.Entities.PersonalizedSet", null)
                        .WithMany()
                        .HasForeignKey("PersonalizedSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biogenom.Nutrition.Domain.Entities.Supplement", null)
                        .WithMany()
                        .HasForeignKey("SupplementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biogenom.Nutrition.Domain.Entities.NutritionAssessment", b =>
                {
                    b.Navigation("NutrientBalances");

                    b.Navigation("PersonalizedSets");
                });
#pragma warning restore 612, 618
        }
    }
}
